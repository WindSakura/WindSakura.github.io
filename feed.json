{
    "version": "https://jsonfeed.org/version/1",
    "title": "Passi0nfruit",
    "description": "",
    "home_page_url": "http://windsakura.github.io",
    "items": [
        {
            "id": "http://windsakura.github.io/2024/11/01/%E6%97%A5%E5%8C%BA/",
            "url": "http://windsakura.github.io/2024/11/01/%E6%97%A5%E5%8C%BA/",
            "title": "日区软件乱码解决",
            "date_published": "2024-11-01T06:14:27.886Z",
            "content_html": "<p><strong>先说结果，我用 win10 成功打开试玩 DLsite 日文游戏，没有乱码，不用改系统时区，也没用上 Locale Emulator（可能是试玩的原因？希腊奶～）</strong></p>\n<p><strong>以下是方法</strong></p>\n<p><strong>需要你安装的软件：</strong></p>\n<ol>\n<li>\n<p>Locale Emulator（我没用上…），阿 B 有 up 做了详细的安装使用教程，这里就不多赘述</p>\n<p>描述：这个东西是用在解压缩后（游戏目录没乱码），一键指定时区来启动 exe 游戏程序的，本身不是汉化软件</p>\n<p>原作者链接：<a href=\"https://github.com/xupefei/Locale-Emulator/releases\">https://github.com/xupefei/Locale-Emulator/releases</a></p>\n<p>版本选择：2.4.1.0 （win10 测试通过，win11 使用 v2.5.0.0 以上版本）</p>\n</li>\n<li>\n<p>WinRAR 或者 7zip</p>\n<p>描述：通过解压缩工具指定语言来解压文件</p>\n<ul>\n<li>WinRAR</li>\n</ul>\n<p>选中要解压的文件，ctrl + E, 选择日本，然后正常解压缩，轻松搞定</p>\n<p>但是收费，初次下载有 40 天试用，这里不提供破解方式，不过可以给一个关键词             “rarreg.key”</p>\n<ul>\n<li>7zip</li>\n</ul>\n<p>* 开源免费，但是要一丢丢操作</p>\n<ul>\n<li>打开 7zip 安装目录，默认是 C:\\Program Files\\7-Zip</li>\n</ul>\n</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "http://windsakura.github.io/2024/11/01/%E5%B1%8F%E5%B9%95%E9%9D%A2%E6%9D%BF%E9%80%89%E6%8B%A9/",
            "url": "http://windsakura.github.io/2024/11/01/%E5%B1%8F%E5%B9%95%E9%9D%A2%E6%9D%BF%E9%80%89%E6%8B%A9/",
            "title": "",
            "date_published": "2024-11-01T06:14:27.885Z",
            "content_html": "<h1 id=\"屏幕面板选择\"><a class=\"markdownIt-Anchor\" href=\"#屏幕面板选择\">#</a> 屏幕面板选择</h1>\n<h3 id=\"群创液晶模组n173hce-g33\"><a class=\"markdownIt-Anchor\" href=\"#群创液晶模组n173hce-g33\">#</a> 群创液晶模组 N173HCE-G33</h3>\n<table>\n<thead>\n<tr>\n<th>解析度</th>\n<th>1920(RGB)×1080  FHD  127PPI 100%SRGB</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>帧频率</td>\n<td>144HZ</td>\n</tr>\n<tr>\n<td>接口类型</td>\n<td>40 pins  eDP (4 Lanes) , eDP1.3 , 端子</td>\n</tr>\n<tr>\n<td>TB 价</td>\n<td>370</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://s2.loli.net/2022/07/21/cuGnN2v9poMfLFl.png\" alt=\"\"></p>\n<h3 id=\"京东方液晶模组ne156qhm-ny1\"><a class=\"markdownIt-Anchor\" href=\"#京东方液晶模组ne156qhm-ny1\">#</a> 京东方液晶模组 NE156QHM-NY1</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">解析度</th>\n<th>2560(RGB)×1440  Quad-HD  188PPI</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">帧频率</td>\n<td>165HZ</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">接口类型</td>\n<td>40 pins  eDP (4 Lanes) , eDP1.4 , HBR2 (5.4G/lane) , 端子</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TB 价</td>\n<td>240 到手</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://s2.loli.net/2022/07/21/hGINwf42gjqbEHe.png\" alt=\"\"></p>\n<h3 id=\"京东方液晶模组ne173qhm-ny2\"><a class=\"markdownIt-Anchor\" href=\"#京东方液晶模组ne173qhm-ny2\">#</a> 京东方液晶模组 NE173QHM-NY2</h3>\n<table>\n<thead>\n<tr>\n<th>解析度</th>\n<th>2560(RGB)×1440, Quad-HD, 170PPI</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>帧频率</td>\n<td>165HZ</td>\n</tr>\n<tr>\n<td>信号接口</td>\n<td>eDP (4 Lanes) , eDP1.4 , HBR2 (5.4G/lane) , 40 pins , 端子</td>\n</tr>\n<tr>\n<td>TB 价</td>\n<td>450</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://s2.loli.net/2022/07/21/JXc3g8fw24AoWtY.png\" alt=\"\"></p>\n",
            "tags": []
        },
        {
            "id": "http://windsakura.github.io/2024/11/01/%E5%A4%A9%E7%BF%BC%E4%BA%91Ts3/",
            "url": "http://windsakura.github.io/2024/11/01/%E5%A4%A9%E7%BF%BC%E4%BA%91Ts3/",
            "title": "天翼云自用搭建",
            "date_published": "2024-11-01T06:14:27.884Z",
            "content_html": "<p>byd 天翼云弹性计算服务器用的 Ubuntu 16.84.7 LTS</p>\n<h2 id=\"1openssl升级前置\"><a class=\"markdownIt-Anchor\" href=\"#1openssl升级前置\">#</a> 1.openssl 升级前置</h2>\n<p>openssl1.1.1 以下会没有 <code>+addext</code>  选项，记得升级</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@vm:~# which openssl</span><br><span class=\"line\">/usr/bin/openssl</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#获取openssl1.1.1w source/old</span><br><span class=\"line\">wget https://www.openssl.org/source/old/1.1.1/openssl-1.1.1w.tar.gz --no-check-certificate</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装依赖/Ubuntu</span><br><span class=\"line\">sudo apt install -y zlib1g</span><br><span class=\"line\">sudo apt install -y zlib1g-dev</span><br><span class=\"line\">sudo apt install -y gcc</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装Perl</span><br><span class=\"line\">wget https://www.cpan.org/src/5.0/perl-5.40.0.tar.gz</span><br><span class=\"line\">#解压perl</span><br><span class=\"line\">tar -zxvf perl-5.40.0.tar.gz</span><br><span class=\"line\">#建立文件目录</span><br><span class=\"line\">mkdir /usr/local/perl</span><br><span class=\"line\">cd perl-5.40.0</span><br><span class=\"line\">./Configure -des -Dprefix=/usr/local/perl -Dusethreads –Uversiononly</span><br><span class=\"line\">#编译</span><br><span class=\"line\">make</span><br><span class=\"line\">#安装</span><br><span class=\"line\">make install</span><br><span class=\"line\">#查看版本</span><br><span class=\"line\">perl -v</span><br></pre></td></tr></table></figure>\n<h2 id=\"2升级openssl\"><a class=\"markdownIt-Anchor\" href=\"#2升级openssl\">#</a> 2. 升级 openssl</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#解压openssl</span><br><span class=\"line\">tar -zxvf openssl-1.1.1w.tar.gz</span><br><span class=\"line\">#调用zlib共享库</span><br><span class=\"line\">cd openssl-1.1.1w</span><br><span class=\"line\">./config shared zlib</span><br><span class=\"line\">#编译</span><br><span class=\"line\">make</span><br><span class=\"line\">#安装</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<p>记得备份旧版本 openssl</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /usr/bin/openssl /usr/bin/openssl.old</span><br><span class=\"line\">mv /usr/lib64/openssl /usr/lib64/openssl.old</span><br></pre></td></tr></table></figure>\n<p>使用新版</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/bin/openssl /usr/bin/openssl</span><br><span class=\"line\">ln -s /usr/local/include/openssl/ /usr/include/openssl</span><br></pre></td></tr></table></figure>\n<p>更新动态链接库数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;/usr/local/lib/&quot; &gt;&gt; /etc/ld.so.conf</span><br></pre></td></tr></table></figure>\n<p>重新加载动态链接库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldconfig -v</span><br></pre></td></tr></table></figure>\n<p>查看新版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl version</span><br></pre></td></tr></table></figure>\n<h2 id=\"3安装tailscale-derp基于ubuntu\"><a class=\"markdownIt-Anchor\" href=\"#3安装tailscale-derp基于ubuntu\">#</a> 3. 安装 tailscale derp (基于 Ubuntu)</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 更新软件源</span><br><span class=\"line\">apt update &amp;&amp; apt upgrade</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装相关依赖</span><br><span class=\"line\">apt install -y wget git openssl curl</span><br><span class=\"line\"></span><br><span class=\"line\"># 拉取go 可打开https://go.dev/dl/查看最新版本</span><br><span class=\"line\">cd /root</span><br><span class=\"line\">wget https://go.dev/dl/go1.20.7inux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"># 解压</span><br><span class=\"line\">rm -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf go1.20.5.linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看版本</span><br><span class=\"line\">export PATH=$PATH:/usr/local/go/bin</span><br><span class=\"line\">go version</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加环境变量</span><br><span class=\"line\">echo &quot;export PATH=$PATH:/usr/local/go/bin&quot; &gt;&gt; /etc/profile</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"># 让go使用国内代理源(国外主机忽略)</span><br><span class=\"line\">go env -w GO111MODULE=on</span><br><span class=\"line\">go env -w GOPROXY=https://goproxy.cn,direct</span><br><span class=\"line\"></span><br><span class=\"line\"># 拉取并编译derper</span><br><span class=\"line\">go install tailscale.com/cmd/derper@main</span><br><span class=\"line\"></span><br><span class=\"line\"># 进入到编译好的文件夹(不要直接复制命令，按实际情况填写)</span><br><span class=\"line\">cd /root/go/pkg/mod/tailscale.com@v1.1.1-xxxx/cmd/derper/</span><br><span class=\"line\"></span><br><span class=\"line\"># 打开cert.go文件</span><br><span class=\"line\">vi cert.go</span><br><span class=\"line\"></span><br><span class=\"line\"># 注释以下信息</span><br><span class=\"line\">func (m *manualCertManager) getCertificate(hi *tls.ClientHelloInfo) (*tls.Certificate, error) &#123;</span><br><span class=\"line\">    // if hi.ServerName != m.hostname &#123;</span><br><span class=\"line\">    //     return nil, fmt.Errorf(&quot;cert mismatch with hostname: %q&quot;, hi.ServerName)</span><br><span class=\"line\">    // &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 编译并输出到/etc/derp/</span><br><span class=\"line\">go build -o /etc/derp/derper</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看是否存在derper文件</span><br><span class=\"line\">cd /root</span><br><span class=\"line\">ls /etc/derp</span><br><span class=\"line\"></span><br><span class=\"line\"># 自签域名(derp.myself.com可随意编写，命令中四处需要一致)</span><br><span class=\"line\">openssl req -x509 -newkey rsa:4096 -sha256 -days 3650 -nodes -keyout /etc/derp/derp.myself.com.key -out /etc/derp/derp.myself.com.crt -subj &quot;/CN=derp.myself.com&quot; -addext &quot;subjectAltName=DNS:derp.myself.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 自行开放33445(tcp)、2478(udp)端口</span><br></pre></td></tr></table></figure>\n<p>设置开机自启</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat &gt; /etc/systemd/system/derp.service &lt;&lt;EOF</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=TS Derper</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\">Wants=network.target</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">User=root</span><br><span class=\"line\">Restart=always</span><br><span class=\"line\">ExecStart=/etc/derp/derper -hostname derp.myself.com -a :33445 -http-port 33446 -certmode manual -certdir /etc/derp</span><br><span class=\"line\">RestartPreventExitStatus=1</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 设置开机自启</span><br><span class=\"line\">systemctl enable derp</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动derp服务</span><br><span class=\"line\">systemctl start derp</span><br></pre></td></tr></table></figure>\n<h3 id=\"验证derp服务\"><a class=\"markdownIt-Anchor\" href=\"#验证derp服务\">#</a> 验证 derp 服务</h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/WindSakura/imgs@main/image-20241031235748258.png\" alt=\"\"></p>\n<p>打开 <a href=\"https://login.tailscale.com/admin/acls/file\">Tailscale 控制台</a>，按照图中位置添加以下内容：</p>\n<p>其中 IPv4、IPv6、RegionCode、RegionName 填写自己的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;derpMap&quot;: &#123;</span><br><span class=\"line\">    //&quot;OmitDefaultRegions&quot;: false,</span><br><span class=\"line\">    &quot;OmitDefaultRegions&quot;: true,</span><br><span class=\"line\">    &quot;Regions&quot;: &#123;&quot;901&quot;: &#123;</span><br><span class=\"line\">        &quot;RegionID&quot;:   901,</span><br><span class=\"line\">        &quot;RegionCode&quot;: &quot;EndlessJY&quot;,</span><br><span class=\"line\">        &quot;RegionName&quot;: &quot;EndlessJY Derper&quot;,</span><br><span class=\"line\">        &quot;Nodes&quot;: [&#123;</span><br><span class=\"line\">            &quot;Name&quot;:             &quot;901a&quot;,</span><br><span class=\"line\">            &quot;RegionID&quot;:         901,</span><br><span class=\"line\">            &quot;IPv4&quot;:             &quot;xxxx&quot;,</span><br><span class=\"line\">            &quot;IPv6&quot;:             &quot;xxxx&quot;,</span><br><span class=\"line\">            &quot;DERPPort&quot;:         33445,</span><br><span class=\"line\">            &quot;InsecureForTests&quot;: true,</span><br><span class=\"line\">        &#125;],</span><br><span class=\"line\">    &#125;&#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 当以上配置文件中&quot;OmitDefaultRegions&quot;: true时表示只启用自建DERP Server</span><br><span class=\"line\">[root@OpenWrt:01:01 PM ~] # tailscale netcheck</span><br><span class=\"line\">Report:</span><br><span class=\"line\">        * UDP: true</span><br><span class=\"line\">        * IPv4: yes, xxxx:xxx</span><br><span class=\"line\">        * IPv6: yes, [xxxx]:xxx</span><br><span class=\"line\">        * MappingVariesByDestIP: </span><br><span class=\"line\">        * HairPinning: false</span><br><span class=\"line\">        * PortMapping: </span><br><span class=\"line\">        * Nearest DERP: EndlessJY Derper</span><br><span class=\"line\">        * DERP latency:</span><br><span class=\"line\">                - EndlessJY: 56.3ms  (EndlessJY Derper)</span><br><span class=\"line\"></span><br><span class=\"line\"># 当以上配置文件中&quot;OmitDefaultRegions&quot;: false时表示启用全部(官方和自建)DERP Server</span><br><span class=\"line\"># 此时Tailscale会自动选择延迟最低节点</span><br><span class=\"line\">[root@OpenWrt:01:03 PM ~] # tailscale netcheck</span><br><span class=\"line\">Report:</span><br><span class=\"line\">        * UDP: true</span><br><span class=\"line\">        * IPv4: yes, xxx:xxx</span><br><span class=\"line\">        * IPv6: yes, [xxx]:xxx</span><br><span class=\"line\">        * MappingVariesByDestIP: false</span><br><span class=\"line\">        * HairPinning: false</span><br><span class=\"line\">        * PortMapping: </span><br><span class=\"line\">        * Nearest DERP: EndlessJY Derper</span><br><span class=\"line\">        * DERP latency:</span><br><span class=\"line\">                - EndlessJY: 55ms    (EndlessJY Derper)</span><br><span class=\"line\">                - hkg: 56.4ms  (Hong Kong)</span><br><span class=\"line\">                - tok: 108.4ms (Tokyo)</span><br><span class=\"line\">                - syd: 178.8ms (Sydney)</span><br><span class=\"line\">                - sea: 181.1ms (Seattle)</span><br><span class=\"line\">                - lax: 202.1ms (Los Angeles)</span><br><span class=\"line\">                - sfo: 208.9ms (San Francisco)</span><br><span class=\"line\">                - sin: 231.2ms (Singapore)</span><br><span class=\"line\">                - ord: 233.1ms (Chicago)</span><br><span class=\"line\">                - den: 234.9ms (Denver)</span><br><span class=\"line\">                - dfw: 237.7ms (Dallas)</span><br><span class=\"line\">                - nyc: 246.8ms (New York City)</span><br><span class=\"line\">                - tor: 261.2ms (Toronto)</span><br><span class=\"line\">                - mia: 262.1ms (Miami)</span><br><span class=\"line\">                - hnl: 262.6ms (Honolulu)</span><br><span class=\"line\">                - lhr: 266.6ms (London)</span><br><span class=\"line\">                - par: 269.1ms (Paris)</span><br><span class=\"line\">                - ams: 272.9ms (Amsterdam)</span><br><span class=\"line\">                - blr: 273.7ms (Bangalore)</span><br><span class=\"line\">                - fra: 285.5ms (Frankfurt)</span><br><span class=\"line\">                - mad: 285.7ms (Madrid)</span><br><span class=\"line\">                - waw: 295ms   (Warsaw)</span><br><span class=\"line\">                - dbi: 330.6ms (Dubai)</span><br><span class=\"line\">                - nai: 344ms   (Nairobi)</span><br><span class=\"line\">                - sao: 371.2ms (São Paulo)</span><br><span class=\"line\">                - jnb: 443.7ms (Johannesburg)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/WindSakura/imgs/blob/main/image-20241101000231832.png?raw=true\" alt=\"image-20241101000231832\"></p>\n",
            "tags": []
        },
        {
            "id": "http://windsakura.github.io/2024/11/01/%E5%85%B3%E4%BA%8E%E6%9F%90%E5%A4%A7%E5%AD%A6%E6%A0%A1%E5%9B%AD%E7%BD%91%E5%85%B1%E4%BA%AB%E4%B8%8A%E7%BD%91%E6%A3%80%E6%B5%8B%E6%9C%BA%E5%88%B6%E7%9A%84%E7%A0%94%E7%A9%B6%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/",
            "url": "http://windsakura.github.io/2024/11/01/%E5%85%B3%E4%BA%8E%E6%9F%90%E5%A4%A7%E5%AD%A6%E6%A0%A1%E5%9B%AD%E7%BD%91%E5%85%B1%E4%BA%AB%E4%B8%8A%E7%BD%91%E6%A3%80%E6%B5%8B%E6%9C%BA%E5%88%B6%E7%9A%84%E7%A0%94%E7%A9%B6%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/",
            "title": "关于某大学校园网共享上网检测机制的研究与解决方案",
            "date_published": "2024-11-01T06:14:27.883Z",
            "content_html": "<h1 id=\"关于某大学校园网共享上网检测机制的研究与解决方案\"><a class=\"markdownIt-Anchor\" href=\"#关于某大学校园网共享上网检测机制的研究与解决方案\">#</a> 关于某大学校园网共享上网检测机制的研究与解决方案</h1>\n<p>Fork from <a href=\"https://blog.sunbk201.site/posts/change-ua-by-proxy.html\">SunBK201 の Blog</a></p>\n<p>Thanks help!</p>\n<p><a href=\"https://t.me/crack_campus_network\">组织链接</a></p>\n<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>关于本校的校园网，相信大家都知道是禁止单一账号下多设备同时访问互联网的，具体表现为 1 个账号只能同时让 1 台有线设备和 1 台无线设备接入互联网，这给我们一些拥有多设备的同学带来了很大的不便，因此不少同学想到了使用家用路由器的方式来解决这个为问题，然而校园网会进行共享上网检测，一旦发现一个 IP 下有多个不同设备的流量，就会封禁账号 2-8 小时不等，害的同学们怨声载道。</p>\n<p>然而奇怪的是本校内竟无应对此检测的方案，俗话说得好，道高一尺魔高一丈，肯定是有办法解决这个问题的。 因此本人出于学术兴趣，针对本校校园网共享上网检测机制进行了研究分析，并针对该机制提出了一些解决方案。</p>\n<h2 id=\"对于本校校园网网络环境的说明\"><a class=\"markdownIt-Anchor\" href=\"#对于本校校园网网络环境的说明\">#</a> 对于本校校园网网络环境的说明</h2>\n<p>校园网网络硬件设备：锐捷三层交换机（目前已知</p>\n<p>校园网认证系统：Drcom Web Portal 认证</p>\n<p>校园网网络防火墙安全方案：深信服</p>\n<h2 id=\"为什么本校要禁止多设备共享上网\"><a class=\"markdownIt-Anchor\" href=\"#为什么本校要禁止多设备共享上网\">#</a> 为什么本校要禁止多设备共享上网？</h2>\n<p>对于家用的上网资费，平均一年就要数百甚至上千元人民币，而校园网的资费一般都很低，如果一个宿舍只用一个账号一个路由器就可以实现全员上网的话，那 ISP 肯定要亏死，因此肯定会封禁像路由器这种设备的。</p>\n<h2 id=\"本校校园网共享上网检测机制的研究\"><a class=\"markdownIt-Anchor\" href=\"#本校校园网共享上网检测机制的研究\">#</a> 本校校园网共享上网检测机制的研究</h2>\n<p>目前已知的（可能）存在的有：</p>\n<p>基于 IPv4 数据包包头内的 TTL 字段的检测</p>\n<p>基于 HTTP 数据包请求头内的 User-Agent 字段的检测</p>\n<p>DPI (Deep Packet Inspection) 深度包检测技术</p>\n<p>基于 IPv4 数据包包头内的 Identification 字段的检测</p>\n<p>基于网络协议栈时钟偏移的检测技术</p>\n<p>Flash Cookie 检测技术</p>\n<p>下面我会对这些技术的实现原理作出进一步说明</p>\n<h3 id=\"基于-ipv4-数据包包头内的-ttl-字段的检测\"><a class=\"markdownIt-Anchor\" href=\"#基于-ipv4-数据包包头内的-ttl-字段的检测\">#</a> 基于 IPv4 数据包包头内的 TTL 字段的检测</h3>\n<blockquote>\n<p>存活时间（Time To Live，TTL），指一个数据包在经过一个路由器时，可传递的最长距离（跃点数）。 每当数据包经过一个路由器时，其存活次数就会被减一。当其存活次数为 0 时，路由器便会取消该数据包转发，IP 网络的话，会向原数据包的发出者发送一个 ICMP TTL 数据包以告知跃点数超限。其设计目的是防止数据包因不正确的路由表等原因造成的无限循环而无法送达及耗尽网络资源。</p>\n</blockquote>\n<p>这是一个比较有效且合理的检测技术，IPv4 数据包下存在 TTL（Time To Live）这一字段，数据包每经过一个路由器（即经过一个网段），该 TTL 值就会减一。</p>\n<p>不同的操作系统的默认 TTL 值是不同的，Windows 是 128， macOS/iOS、Linux 是 64。</p>\n<p>因此如果我们自己接入路由器到校园网，我们的通过路由器的数据包会变为 127 或 63，一旦校园网抓包检测到这种数据包 TTL 不是 128 或 64，就会判定为用户接入了路由器。</p>\n<h3 id=\"基于-http-数据包请求头内的-user-agent-字段的检测\"><a class=\"markdownIt-Anchor\" href=\"#基于-http-数据包请求头内的-user-agent-字段的检测\">#</a> 基于 HTTP 数据包请求头内的 User-Agent 字段的检测</h3>\n<p>HTTP 数据包请求头存在一个叫做 User-Agent 的字段，该字段通常能够标识出操作系统类型，例如：</p>\n<p>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.72 Safari/537.36 Edg/89.0.774.45</p>\n<p>Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Mobile/7B405</p>\n<p>校园网会通过多次抓包检测此字段，若发现同时出现例如 Windows NT 10.0 iPad 的字段，则判定存在多设备上网。</p>\n<h3 id=\"dpi-deep-packet-inspection-深度包检测技术\"><a class=\"markdownIt-Anchor\" href=\"#dpi-deep-packet-inspection-深度包检测技术\">#</a> DPI (Deep Packet Inspection) 深度包检测技术</h3>\n<p>这个检测方案比较先进，检测系统会抓包分析应用层的流量，根据不同应用程序的数据包的特征值来判断出是否存在多设备上网。</p>\n<p>具体可参考：<a href=\"https://patents.google.com/patent/CN106411644A/zh\">基于 dpi 技术的网络共享设备检测方法及系统</a></p>\n<p>此种方式已确认在锐捷相关设备上应用，当由于此项功能极耗费性能，因此有些学校可能不会开启此项功能。</p>\n<h3 id=\"基于-ipv4-数据包包头内的-identification-字段的检测\"><a class=\"markdownIt-Anchor\" href=\"#基于-ipv4-数据包包头内的-identification-字段的检测\">#</a> 基于 IPv4 数据包包头内的 Identification 字段的检测</h3>\n<p>IP 报文首部存在一个叫做 Identification 的字段，此字段用来唯 一标示一个 IP 报文，在实际的应用中通常把它当做一个计数器，一台主机依次发送的 IP 数据包内的 Identification 字段会对应的依次递增，同一时间段内，而不同设备的 Identification 字段的递增区间一般是不同的，因此校园网可以根据一段时间内递增区间的不同判断出是否存在多设备共享上网。</p>\n<p>具体可以参考此专利：<a href=\"https://patents.google.com/patent/CN104836700A/zh\">基于 ipid 和概率统计模型的 nat 主机个数检测方法</a></p>\n<p>不过经过我的抓包分析，Windows 的 TCP/IP 协议栈对 Identification 字段的实现是递增，而 iOS 的实现是保持全 0，因此校园网是否使用了该检测机制有待商榷。</p>\n<h3 id=\"基于网络协议栈时钟偏移的检测技术\"><a class=\"markdownIt-Anchor\" href=\"#基于网络协议栈时钟偏移的检测技术\">#</a> 基于网络协议栈时钟偏移的检测技术</h3>\n<p>不同主机物理时钟偏移不同，网络协议栈时钟与物理时钟存在对应关系，不同主机发送报文频率与时钟存在统计对应关系，通过特定的频谱分析算法，发现不同的网络时钟偏移来确定不同主机。</p>\n<p>具体可以参考此专利：<a href=\"https://patents.google.com/patent/CN111970173A/zh\">一种基于时钟偏移的加密流量共享检测方法与装置</a></p>\n<p>此种方式具有一定的实验性，因此我不认为此种方式投入了商用。</p>\n<h3 id=\"flash-cookie-检测技术\"><a class=\"markdownIt-Anchor\" href=\"#flash-cookie-检测技术\">#</a> Flash Cookie 检测技术</h3>\n<p>这个技术已经用不到了，Flash 都凉了。。不过还是提一下。</p>\n<p>Flash Cookie 会记录用户在访问 Flash 网页的时候保留的信息，只要当用户打开浏览器去上网，那么就能被 AC 记录到 Flash Cookie 的特征值，由于 Flash Cookie 不容易被清除，而且具有针对每个用户具有唯一，并且支持跨浏览器，所以被用于做防共享检测。</p>\n<p>具体参考：<a href=\"https://bbs.sangfor.com.cn/plugin.php?id=sangfor_databases:index&amp;mod=viewdatabase&amp;tid=6273\">深信服防共享测试指导书</a></p>\n<h2 id=\"防共享上网检测的解决方案\"><a class=\"markdownIt-Anchor\" href=\"#防共享上网检测的解决方案\">#</a> 防共享上网检测的解决方案</h2>\n<p>对于校园网重重的检测，我们似乎已经不可能从终端级提出一个完美的解决方案，因此，下面的解决方案都是基于网关级的。简单来说，我们需要在路由器上动手脚。</p>\n<p>路由器固件我们选择 OpenWrt，这是一个开源的路由器系统，允许我们自定义其系统内核以及添加自定义插件。</p>\n<h3 id=\"基于-ipv4-数据包包头内的-ttl-字段的检测-2\"><a class=\"markdownIt-Anchor\" href=\"#基于-ipv4-数据包包头内的-ttl-字段的检测-2\">#</a> 基于 IPv4 数据包包头内的 TTL 字段的检测</h3>\n<p>应对思路很简单：修改 TTL 为固定值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在 OpenWrt 路由器上安装必要的软件包</span><br><span class=\"line\">opkg update &amp;&amp; opkg install iptables-mod-ipopt kmod-ipt-ipopt</span><br></pre></td></tr></table></figure>\n<p>进入 OpenWRT 防火墙设置，在 自定义设置 中填入以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t mangle -A POSTROUTING -j TTL --ttl-set 64</span><br></pre></td></tr></table></figure>\n<h3 id=\"基于-http-数据包请求头内的-user-agent-字段的检测-2\"><a class=\"markdownIt-Anchor\" href=\"#基于-http-数据包请求头内的-user-agent-字段的检测-2\">#</a> 基于 HTTP 数据包请求头内的 User-Agent 字段的检测</h3>\n<p>应对思路：统一所有终端的 User-Agent 这一点实现起来有点困难，目前有三种解决方案。</p>\n<h4 id=\"方案一通过-privoxy-修改-user-agent此方案不再建议使用\"><a class=\"markdownIt-Anchor\" href=\"#方案一通过-privoxy-修改-user-agent此方案不再建议使用\">#</a> 方案一：通过 Privoxy 修改 User-Agent（此方案不再建议使用）</h4>\n<p>这个方案存在一个很大的缺点就是性能太差，会极大的拖慢我们的带宽，但也是最简单的方案。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 更新 OpenWRT 路由器的软件源，并安装 Privoxy 软件包</span><br><span class=\"line\">opkg update</span><br><span class=\"line\">opkg install privoxy luci-app-privoxy luci-i18n-privoxy-zh-cn</span><br></pre></td></tr></table></figure>\n<p>进入 Privoxy 管理页面设置，进入文件与目录，Action Files 中只保留 match-all.action，Filter Files 与 Trust Files 留空；进入访问控制，Listen Address 填写 0.0.0.0:8118，Permit Address 填写 192.168.0.0/16，勾选 Enable Action File Editor；进入杂项，勾选 Accept Intercepted Requests；进入日志，取消全部选项；点击保存并应用；进入 OpenWRT 防火墙设置，在自定义设置中填入以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将局域网内的 HTTP 请求转发到 Privoxy 代理服务器上</span><br><span class=\"line\">iptables -t nat -N http_ua_drop</span><br><span class=\"line\">iptables -t nat -I PREROUTING -p tcp --dport 80 -j http_ua_drop</span><br><span class=\"line\">iptables -t nat -A http_ua_drop -m mark --mark 1/1 -j RETURN</span><br><span class=\"line\">iptables -t nat -A http_ua_drop -d 0.0.0.0/8 -j RETURN</span><br><span class=\"line\">iptables -t nat -A http_ua_drop -d 127.0.0.0/8 -j RETURN</span><br><span class=\"line\">iptables -t nat -A http_ua_drop -d 192.168.0.0/16 -j RETURN</span><br><span class=\"line\">iptables -t nat -A http_ua_drop -p tcp -j REDIRECT --to-port 8118</span><br></pre></td></tr></table></figure>\n<p>打开  <code>http://config.privoxy.org/edit-actions-list?f=0</code> ；点击 Edit，在 Action 那一列中，hide-user-agent 改选为 Enable - 在右侧 User Agent string to send 框中填写 <code>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.108 Safari/537.36</code> ，其它全部选择为 No Change；点击 Submit。</p>\n<h4 id=\"方案二使用-xmurp-ua-修改-ua\"><a class=\"markdownIt-Anchor\" href=\"#方案二使用-xmurp-ua-修改-ua\">#</a> 方案二：使用 XMURP-UA 修改 UA</h4>\n<p>这个方案需要手动交叉编译 OpenWRT，有功底的同学可以尝试。</p>\n<p>优点：这是个内核模块，因此性能不错</p>\n<p>缺点：因为是内核模块，因此稳定性欠佳，此外这个模块只能修改 80 端口的数据包，因此有些非 80 端口的数据包是修改不了的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/CHN-beta/xmurp-ua.git package/xmurp-ua</span><br><span class=\"line\">make menuconfig</span><br><span class=\"line\"># 在 Kernel module -&gt; Other modules 里勾选 kmod-xmurp-ua（按 y）。保存退出。</span><br><span class=\"line\"># 正常编译镜像，镜像中就会包含插件了。</span><br></pre></td></tr></table></figure>\n<p>如果要单独编译此模块，需运行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make package/xmurp-ua/compile V=sc</span><br><span class=\"line\">cd /tmp</span><br><span class=\"line\">pkg install 改成对应的xmurp-ua文件名.ipk</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装压缩内存插件</span><br><span class=\"line\">opkg update</span><br><span class=\"line\">opkg install zram-swap</span><br><span class=\"line\"></span><br><span class=\"line\"># 检测这两个插件是否均已安装成功</span><br><span class=\"line\">opkg list-installed | grep zram-swap</span><br><span class=\"line\">opkg list-installed | grep xmurp-ua</span><br><span class=\"line\"></span><br><span class=\"line\"># 重启路由器</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n<h4 id=\"方案三使用-ua2f-修改-ua\"><a class=\"markdownIt-Anchor\" href=\"#方案三使用-ua2f-修改-ua\">#</a> 方案三：使用 UA2F 修改 UA</h4>\n<p>这可能是最理想的方案，UA2F 可以修改所有端口的数据包，而且性能不错，不过依旧需要编译。 具体参见：<a href=\"https://github.com/Zxilly/UA2F\">Zxilly/UA2F</a>。</p>\n<p>验证方式：<a href=\"http://ua.233996.xyz/\">UA 检测 - HTTP</a></p>\n<h4 id=\"方案四使用代理客户端中的重写功能对http-header进行修改\"><a class=\"markdownIt-Anchor\" href=\"#方案四使用代理客户端中的重写功能对http-header进行修改\">#</a> 方案四：使用代理客户端中的重写功能对 http-header 进行修改</h4>\n<p>这应该是最容易操作的方法，也可能是有效的方法。</p>\n<p>以 Quantumult X 为例，只需在重写规则里面加入一条：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:// url request-header (\\r\\n)User-[A|a]gent:.+(\\r\\n) request-header $1User-Agent: $2</span><br></pre></td></tr></table></figure>\n<p>iOS 客户端 Quantumult X、Shadowrocket、Surge 等都支持重写功能。</p>\n<p>Android 的客户端可以使用 surfboard（或许现在不支持了）。</p>\n<p>macOS 可以使用 Surge。</p>\n<p>Clash 用户要失望了，Clash 不支持 url 重写，不过可以使用 Clash 走规则匹配，把 http 流量全都加密。</p>\n<p>如果不想在自己的客户端上长时间开启代理，可以在 OpenWrt 中使用 OpenClash/ShellClash 进行网关级修改。</p>\n<h3 id=\"基于-ipv4-数据包包头内的-identification-字段的检测-2\"><a class=\"markdownIt-Anchor\" href=\"#基于-ipv4-数据包包头内的-identification-字段的检测-2\">#</a> 基于 IPv4 数据包包头内的 Identification 字段的检测</h3>\n<p>应对思路：修改所有数据包的 ID 字段为递增</p>\n<p>我们使用 <a href=\"https://github.com/CHN-beta/rkp-ipid\">rkp-ipid</a> 这一内核模块进行修改。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/CHN-beta/rkp-ipid.git package/rkp-ipid</span><br><span class=\"line\">make package/rkp-ipid/compile V=sc</span><br><span class=\"line\"># 设置所有发出的数据包的 IPID 为递增</span><br><span class=\"line\">iptables -t mangle -N IPID_MOD</span><br><span class=\"line\">iptables -t mangle -A FORWARD -j IPID_MOD</span><br><span class=\"line\">iptables -t mangle -A OUTPUT -j IPID_MOD</span><br><span class=\"line\">iptables -t mangle -A IPID_MOD -d 0.0.0.0/8 -j RETURN</span><br><span class=\"line\">iptables -t mangle -A IPID_MOD -d 127.0.0.0/8 -j RETURN</span><br><span class=\"line\"># iptables -t mangle -A IPID_MOD -d 10.0.0.0/8 -j RETURN</span><br><span class=\"line\">iptables -t mangle -A IPID_MOD -d 172.16.0.0/12 -j RETURN</span><br><span class=\"line\">iptables -t mangle -A IPID_MOD -d 192.168.0.0/16 -j RETURN</span><br><span class=\"line\">iptables -t mangle -A IPID_MOD -d 255.0.0.0/8 -j RETURN</span><br><span class=\"line\">iptables -t mangle -A IPID_MOD -j MARK --set-xmark 0x10/0x10</span><br></pre></td></tr></table></figure>\n<h3 id=\"基于网络协议栈时钟偏移的检测技术-2\"><a class=\"markdownIt-Anchor\" href=\"#基于网络协议栈时钟偏移的检测技术-2\">#</a> 基于网络协议栈时钟偏移的检测技术</h3>\n<p>应对思路：在局域网中建立 NTP 服务器统一时间戳</p>\n<p>进入 OpenWRT 系统设置，勾选 Enable NTP client（启用 NTP 客户端）和 Provide NTP server（作为 NTP 服务器提供服务）</p>\n<p>NTP server candidates（候选 NTP 服务器）四个框框分别填写:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ntp1.aliyun.com, time1.cloud.tencent.com, stdtime.gov.hk, pool.ntp.org</span><br></pre></td></tr></table></figure>\n<p>进入 OpenWrt 防火墙设置，在 自定义设置 中填入以下内容:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 防时钟偏移检测</span><br><span class=\"line\">iptables -t nat -N ntp_force_local</span><br><span class=\"line\">iptables -t nat -I PREROUTING -p udp --dport 123 -j ntp_force_local</span><br><span class=\"line\">iptables -t nat -A ntp_force_local -d 0.0.0.0/8 -j RETURN</span><br><span class=\"line\">iptables -t nat -A ntp_force_local -d 127.0.0.0/8 -j RETURN</span><br><span class=\"line\">iptables -t nat -A ntp_force_local -d 192.168.0.0/16 -j RETURN</span><br><span class=\"line\">iptables -t nat -A ntp_force_local -s 192.168.0.0/16 -j DNAT --to-destination 192.168.1.1</span><br><span class=\"line\"># 最后的 192.168.1.1 需要修改为路由器网关地址</span><br></pre></td></tr></table></figure>\n<p>确认效果：在 Windows 电脑上，打开控制面板，在右上角查看方式处选择小图标，然后点击 “日期和时间”。点击 Internet 时间 -&gt; 更改设置，点几次 “立即更新”，直到提示 “时钟在 xxx 与 xxx 同步成功”。这时，暂时地拔掉墙上接口与路由器之间的网线（断开了外网的连接），再点一次 “立即更新”，应该仍然提示成功，这说明 NTP 请求已经被劫持到了路由器自身而不是外网。然后把网线插回</p>\n<h3 id=\"flash-cookie-检测技术-2\"><a class=\"markdownIt-Anchor\" href=\"#flash-cookie-检测技术-2\">#</a> Flash Cookie 检测技术</h3>\n<p>iptables 拒绝 AC 进行 Flash 检测</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># iptables 拒绝 AC 进行 Flash 检测</span><br><span class=\"line\">iptables -I FORWARD -p tcp --sport 80 --tcp-flags ACK ACK -m string --algo bm --string &quot; src=\\&quot;http://1.1.1.&quot; -j DROP</span><br></pre></td></tr></table></figure>\n<h3 id=\"dpi-deep-packet-inspection-深度包检测技术-2\"><a class=\"markdownIt-Anchor\" href=\"#dpi-deep-packet-inspection-深度包检测技术-2\">#</a> DPI (Deep Packet Inspection) 深度包检测技术</h3>\n<p>应对思路：加密数据包</p>\n<p>我们无法通过修改数据包来防止 dpi 检测，因此加密是最好的手段</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<p>对于认为修改 UA IPID 太过麻烦的同学，可以直接对自己的流量进行全加密，前提是你的有充足的解密代理服务器</p>\n<p>下面我给出最终全部的配置脚本：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># @SunBK201 - https://www.sunbk201.site</span><br><span class=\"line\">iptables -t nat -A PREROUTING -p udp --dport 53 -j REDIRECT --to-ports 53</span><br><span class=\"line\">iptables -t nat -A PREROUTING -p tcp --dport 53 -j REDIRECT --to-ports 53</span><br><span class=\"line\"></span><br><span class=\"line\"># 通过 rkp-ipid 设置 IPID</span><br><span class=\"line\">iptables -t mangle -N IPID_MOD</span><br><span class=\"line\">iptables -t mangle -A FORWARD -j IPID_MOD</span><br><span class=\"line\">iptables -t mangle -A OUTPUT -j IPID_MOD</span><br><span class=\"line\">iptables -t mangle -A IPID_MOD -d 0.0.0.0/8 -j RETURN</span><br><span class=\"line\">iptables -t mangle -A IPID_MOD -d 127.0.0.0/8 -j RETURN</span><br><span class=\"line\">#由于本校局域网是A类网，所以我将这一条注释掉了，具体要不要注释结合你所在的校园网</span><br><span class=\"line\"># iptables -t mangle -A IPID_MOD -d 10.0.0.0/8 -j RETURN</span><br><span class=\"line\">iptables -t mangle -A IPID_MOD -d 172.16.0.0/12 -j RETURN</span><br><span class=\"line\">iptables -t mangle -A IPID_MOD -d 192.168.0.0/16 -j RETURN</span><br><span class=\"line\">iptables -t mangle -A IPID_MOD -d 255.0.0.0/8 -j RETURN</span><br><span class=\"line\">iptables -t mangle -A IPID_MOD -j MARK --set-xmark 0x10/0x10</span><br><span class=\"line\"></span><br><span class=\"line\"># ua2f 改UA</span><br><span class=\"line\">iptables -t mangle -N ua2f</span><br><span class=\"line\">#由于本校局域网是A类网，所以我将这一条注释掉了，具体要不要注释结合你所在的校园网</span><br><span class=\"line\"># iptables -t mangle -A ua2f -d 10.0.0.0/8 -j RETURN</span><br><span class=\"line\">iptables -t mangle -A ua2f -d 127.0.0.0/8 -j RETURN</span><br><span class=\"line\">iptables -t mangle -A ua2f -d 192.168.0.0/16 -j RETURN # 不处理流向保留地址的包</span><br><span class=\"line\">iptables -t mangle -A ua2f -p tcp --dport 443 -j RETURN # 不处理 https</span><br><span class=\"line\">iptables -t mangle -A ua2f -p tcp --dport 22 -j RETURN # 不处理 SSH </span><br><span class=\"line\">iptables -t mangle -A ua2f -p tcp --dport 80 -j CONNMARK --set-mark 44</span><br><span class=\"line\">iptables -t mangle -A ua2f -m connmark --mark 43 -j RETURN # 不处理标记为非 http 的流 (实验性)</span><br><span class=\"line\">iptables -t mangle -A ua2f -m set --set nohttp dst,dst -j RETURN</span><br><span class=\"line\">iptables -t mangle -A ua2f -j NFQUEUE --queue-num 10010</span><br><span class=\"line\">  </span><br><span class=\"line\">iptables -t mangle -A FORWARD -p tcp -m conntrack --ctdir ORIGINAL -j ua2f</span><br><span class=\"line\">iptables -t mangle -A FORWARD -p tcp -m conntrack --ctdir REPLY</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 防时钟偏移检测</span><br><span class=\"line\">iptables -t nat -N ntp_force_local</span><br><span class=\"line\">iptables -t nat -I PREROUTING -p udp --dport 123 -j ntp_force_local</span><br><span class=\"line\">iptables -t nat -A ntp_force_local -d 0.0.0.0/8 -j RETURN</span><br><span class=\"line\">iptables -t nat -A ntp_force_local -d 127.0.0.0/8 -j RETURN</span><br><span class=\"line\">iptables -t nat -A ntp_force_local -d 192.168.0.0/16 -j RETURN</span><br><span class=\"line\">iptables -t nat -A ntp_force_local -s 192.168.0.0/16 -j DNAT --to-destination 192.168.1.1</span><br><span class=\"line\"></span><br><span class=\"line\"># 通过 iptables 修改 TTL 值</span><br><span class=\"line\">iptables -t mangle -A POSTROUTING -j TTL --ttl-set 64</span><br><span class=\"line\"></span><br><span class=\"line\"># iptables 拒绝 AC 进行 Flash 检测</span><br><span class=\"line\">iptables -I FORWARD -p tcp --sport 80 --tcp-flags ACK ACK -m string --algo bm --string &quot; src=\\&quot;http://1.1.1.&quot; -j DROP  </span><br></pre></td></tr></table></figure>\n<h2 id=\"对于防检测方案的可用性分析验证\"><a class=\"markdownIt-Anchor\" href=\"#对于防检测方案的可用性分析验证\">#</a> 对于防检测方案的可用性分析验证</h2>\n<p>为检测方案的可用性，我进行了抓包分析。</p>\n<p>实验环境为：</p>\n<p>一台路由器（模拟校园网提供接入互联网服务）（192.168.5.1）</p>\n<p>一台抓包服务器 (192.168.5.219)(模拟检测系统)，提供 web 访问服务，以供客户机访问。</p>\n<p>一台路由器（模拟我们自己接入校园网的路由器）（192.168.5.190）</p>\n<p>两台客户机：一台 Win10（192.168.1.10）一台 iOS（192.168.1.20）</p>\n<p>两台客户机同时访问抓包服务器 (192.168.5.219) 进行抓包分析</p>\n<h3 id=\"部署防检测方案前\"><a class=\"markdownIt-Anchor\" href=\"#部署防检测方案前\">#</a> 部署防检测方案前</h3>\n<p>TTL: 127 / 63</p>\n<p>IPID: 64764-64779 / 0-0</p>\n<p>UA: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.72 Safari/537.36 Edg/89.0.774.45</p>\n<p>Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Mobile/7B405</p>\n<p><img src=\"https://sunbk201.oss-cn-beijing.aliyuncs.com/img/20210614011914.png\" alt=\"img\"> <img src=\"https://sunbk201.oss-cn-beijing.aliyuncs.com/img/20210614012122.png\" alt=\"img\"></p>\n<h3 id=\"部署防检测方案后\"><a class=\"markdownIt-Anchor\" href=\"#部署防检测方案后\">#</a> 部署防检测方案后</h3>\n<p>TTL: 64 / 64</p>\n<p>IPID: 2319-2504</p>\n<p>UA: FFFFFFFFFFFFFFFFFFFFFFFFFFFF</p>\n<p><img src=\"https://sunbk201.oss-cn-beijing.aliyuncs.com/img/20210614011948.png\" alt=\"img\"> <img src=\"https://sunbk201.oss-cn-beijing.aliyuncs.com/img/20210614012220.png\" alt=\"img\"></p>\n<h3 id=\"最终结论防共享检测有效\"><a class=\"markdownIt-Anchor\" href=\"#最终结论防共享检测有效\">#</a> 最终结论：防共享检测有效！</h3>\n<h2 id=\"实际使用\"><a class=\"markdownIt-Anchor\" href=\"#实际使用\">#</a> 实际使用</h2>\n<p>我已经使用此方案一周之久，这一周内没有过发生一次封禁，可以肯定，此解决方案实际使用是有效的！</p>\n<h2 id=\"写在最后\"><a class=\"markdownIt-Anchor\" href=\"#写在最后\">#</a> 写在最后</h2>\n<p>我在写这篇文章的时候已经大三了，其实早在我大一的时候就有过一段时间来试图解决这个问题，但是当时能力还不够，无法拿出完整的解决方案，现在能力够了，但是也快毕业了，说实话现在再使用这些防检测方案已经有些晚了，不过，我相信这些解决方案可以对我们以后一些大一大二的同学有所帮助，我所做的一些工作也是值得的。</p>\n<p>具体操作见：<a href=\"https://www.notion.so/OpenWrt-f59ae1a76741486092c27bc24dbadc59\">OpenWrt 编译与防检测部署教程</a></p>\n<p>如果大家有疑问可以加讨论组： <a href=\"https://t.me/crack_campus_network\">Telegram</a></p>\n<p>最后，感谢开发 OpenWrt 防检测模块的作者们 <a href=\"https://github.com/Zxilly\">Zxilly</a>、 <a href=\"https://github.com/CHN-beta\">CHN-beta</a> ，是有了他们的无私奉献，才使我能够整理出这么一份解决方案。</p>\n",
            "tags": []
        },
        {
            "id": "http://windsakura.github.io/2024/11/01/VPN%E6%98%AF%E5%A6%82%E4%BD%95%E6%8E%A5%E7%AE%A1%E4%BD%A0%E7%9A%84%E6%B5%81%E9%87%8F%E7%9A%84%EF%BC%9F/",
            "url": "http://windsakura.github.io/2024/11/01/VPN%E6%98%AF%E5%A6%82%E4%BD%95%E6%8E%A5%E7%AE%A1%E4%BD%A0%E7%9A%84%E6%B5%81%E9%87%8F%E7%9A%84%EF%BC%9F/",
            "title": "VPN是如何接管你的流量的？",
            "date_published": "2024-11-01T06:14:27.881Z",
            "content_html": "<h1 id=\"vpn是如何接管你的流量的\"><a class=\"markdownIt-Anchor\" href=\"#vpn是如何接管你的流量的\">#</a> VPN 是如何接管你的流量的？</h1>\n<p>Fork from <a href=\"https://blog.sunbk201.site/posts/vpn-route.html\">SunBK201</a></p>\n<p>如今，魔法道具逐渐成为了一些同学的常用 App，甚至必备 App，了解这些道具是如何接管你的网络流量显得很重要。</p>\n<p>目前，常见的接管方式有 3 种：</p>\n<ul>\n<li>系统配置代理</li>\n<li>虚拟网卡接管</li>\n<li>网关透明代理</li>\n</ul>\n<p>这里我主要谈前两种。</p>\n<h2 id=\"系统配置代理\"><a class=\"markdownIt-Anchor\" href=\"#系统配置代理\">#</a> 系统配置代理</h2>\n<p>这种方式是最易实现的方式，绝大多数的操作系统都会向用户提供配置系统代理的选项，用户在手动或自动配置系统代理后， 向 Internet 发出的网络连接并不会直接向目标服务器发送，而是通过代理服务器转发给目标服务器。</p>\n<p>但由于系统只支持 HTTP、HTTPS、SOCKS 等代理协议，所以在使用这种方式时，用户配置的代理服务器一般并非远端代理服务器， 而是 127.0.0.1，通过将网络流量发送到位于本地的代理客户端，通过代理客户端对网络代理协议进行转换，最终将流量发送到远端代理服务器的代理服务端。</p>\n<p>对于部分 GUI 程序，用户可以直接通过操作系统提供的选项进行配置系统代理，诸如 Web 浏览器的网路连接都可以通过这种方式接管。</p>\n<p>对于 wget、curl、git 等 CLI 工具，我们可以通过设置环境变量 http_proxy，https_proxy 实现接管。</p>\n<h2 id=\"虚拟网卡接管\"><a class=\"markdownIt-Anchor\" href=\"#虚拟网卡接管\">#</a> 虚拟网卡接管</h2>\n<p>第一种系统配置代理的方式看似美好，但实际上又很大的限制。 系统配置代理并不能接管系统中的大多数流量，因为这种方式需要程序亲自去支持系统代理，也就是说如果软件的开发者并不打算 支持系统代理，那么系统配置代理的方式并不能接管到这些软件发出的流量。 这也就是为什么有些同学即使开了代理，也依旧无法连接外服游戏服务器进行流畅低延迟网游。</p>\n<p>既然系统配置代理有如此大的限制，那么我们需要怎么样的方式对我们系统中的绝大多数流量进行接管，简单来说，我们需要对进程进行强制接管，让程序无感知，而虚拟网卡接管就可以实现。</p>\n<p>简单来说，这是一种网络层级的接管，这种方式是通过在操作系统中建立虚拟网卡，并修改系统中的全局路由表实现的。 这里有 2 个关键点，一个是虚拟网卡，一个是全局路由表。</p>\n<p>虚拟网卡接管到的是网络层的流量，因此我们需要实现一个 TCP 协议栈对接管到的数据包进行重新的拆包解析，这也就是虚拟网卡的主要工作。</p>\n<blockquote>\n<p>TUN 是操作系统内核提供的三层虚拟网络设备。</p>\n<p>TAP 是二层 (以太网) 虚拟网络设备。</p>\n</blockquote>\n<p>有了虚拟网卡，我们还需要让操作系统能够把网络流量发送给我们的虚拟网卡，而不是物理网卡，这就是全局路由表的工作。 任何系统网络层以上的网络流量都要按照路由表进行转发，因此修改系统全局路由表就是虚拟网卡接管的关键。</p>\n<p>那么，我们该如何修改路由表才能让网络流向虚拟网卡，下面我们来看下我的系统的路由表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Internet:</span><br><span class=\"line\">Destination        Gateway            Flags           Netif Expire</span><br><span class=\"line\">default            192.168.0.1        UGScg             en0       </span><br><span class=\"line\">1                  198.18.0.1         UGSc            utun5       </span><br><span class=\"line\">2/7                198.18.0.1         UGSc            utun5       </span><br><span class=\"line\">4/6                198.18.0.1         UGSc            utun5       </span><br><span class=\"line\">8/5                198.18.0.1         UGSc            utun5       </span><br><span class=\"line\">16/4               198.18.0.1         UGSc            utun5       </span><br><span class=\"line\">32/3               198.18.0.1         UGSc            utun5       </span><br><span class=\"line\">64/2               198.18.0.1         UGSc            utun5       </span><br><span class=\"line\">128.0/1            198.18.0.1         UGSc            utun5       </span><br><span class=\"line\">127                127.0.0.1          UCS               lo0       </span><br><span class=\"line\">127.0.0.1          127.0.0.1          UH                lo0       </span><br><span class=\"line\">169.254            link#11            UCS               en0      !</span><br><span class=\"line\">192.168.0          link#11            UCS               en0      !</span><br><span class=\"line\">192.168.0.1/32     link#11            UCS               en0      !</span><br><span class=\"line\">192.168.0.1        b0:95:8e:ac:40:d4  UHLWIir           en0   1193</span><br><span class=\"line\">192.168.0.104/32   link#11            UCS               en0      !</span><br><span class=\"line\">192.168.0.255      ff:ff:ff:ff:ff:ff  UHLWbI            en0      !</span><br><span class=\"line\">198.18.0/15        198.18.0.1         UGSc            utun5       </span><br><span class=\"line\">198.18.0.1         198.18.0.1         UH              utun5       </span><br><span class=\"line\">224.0.0/4          link#11            UmCS              en0      !</span><br><span class=\"line\">224.0.0.251        1:0:5e:0:0:fb      UHmLWI            en0       </span><br><span class=\"line\">239.255.255.250    1:0:5e:7f:ff:fa    UHmLWI            en0       </span><br><span class=\"line\">255.255.255.255/32 link#11            UCS               en0      !</span><br></pre></td></tr></table></figure>\n<p>首先，第一条是我的默认路由，它的出口是我的物理网卡。 接下来的第二条到第九条则是我们的虚拟网卡接管方式所修改的，而这几条是最关键的。 对于配置过路由表的同学可能对其他几条路由的含义是了解的，但是对于第二条到第九条，可能并不熟悉，甚至感到怪异， 因为这种路由太少见了。</p>\n<p>让我解释下，198.18.0.1 是我的虚拟网卡 ip 地址，即 utun5，也就是我们的网络流量的目的地址。 而第二条到第九条的 Destination，  <code>1</code> ,  <code>2/7</code> ,  <code>4/6</code> ,  <code>8/5</code> ,  <code>16/4</code> ,  <code>32/3</code> ,  <code>64/2</code> ,  <code>128.0/1</code> ，是代表着各网络 ip 端：</p>\n<ul>\n<li><code>1 : 1.0.0.0 - 1.255.255.255</code></li>\n<li><code>2/7 : 2.0.0.0 - 3.255.255.255</code></li>\n<li><code>4/6 : 4.0.0.0 - 7.255.255.255</code></li>\n<li><code>8/5 : 8.0.0.0 - 15.255.255.255</code></li>\n<li><code>16/4 : 16.0.0.0 - 31.255.255.255</code></li>\n<li><code>32/3 : 32.0.0.0 - 63.255.255.255</code></li>\n<li><code>64/2 : 64.0.0.0 - 127.255.255.255</code></li>\n<li><code>128.0/1 : 128.0.0.0 - 255.255.255.255</code></li>\n</ul>\n<p>可以看到，这些 ip 段覆盖的全部的 IPv4 的地址，因此所有的出口流量都会流向我们的虚拟网卡 utun5，而不是第一条默认路由。</p>\n<h2 id=\"网关透明代理\"><a class=\"markdownIt-Anchor\" href=\"#网关透明代理\">#</a> 网关透明代理</h2>\n<p>这种代理方式将代理客户端从我们的个人终端转移到路由网关，个人终端无需进行任何配置，因此称作透明代理。 在这种方式下，我们的网关作为代理客户端负责加密流量拆包和封包。可以理解为第二种方式中虚拟网卡就是这里的路由网关。 只不过这里路由网关是物理的，并非虚拟的。 当然网关可以是虚拟的，这也就是一些客户端实现网管代理模式的思路。</p>\n<p>在网关透明代理方式下，局域网下所有终端设备的网络流量都可以被网关接管，因此，这种网关透明代理方式可以说是最一劳永逸的方式。</p>\n<p>总的来说，由于传统的系统配置代理方式的局限，虚拟网卡接管方式已经成为主流代理客户端的标配，而通过虚拟网卡与网关代理的结合， 又诞生出虚拟网卡接管局域网实现网关级代理的新方式，这些多样的方式让我们配置网络代理变得更加简单，更加灵活。</p>\n",
            "tags": []
        },
        {
            "id": "http://windsakura.github.io/2024/11/01/hello-world/",
            "url": "http://windsakura.github.io/2024/11/01/hello-world/",
            "title": "Hello World",
            "date_published": "2024-11-01T06:14:27.878Z",
            "content_html": "<p>1Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        }
    ]
}